_target_: src.datamodule.inertia_balls_datamodule.InertiaBallsDataModule

defaults:
  - dataset: all_p_sparse_offset # position_offset_only # options: colour_offset_only, position_offset_only
  
dataset_name: ${join_str:${datamodule.dataset.properties_list}} # "xycs" # "xy", "xycs"
datamodule_name: inertia_balls

regenerate: False
# data_dir: ${join_str:"dataset_files","/",${datamodule.dataset_name}}
data_dir: "/home/user/scratch/inertia_balls/${datamodule.n_balls}/"

seed: ${seed}

save_dataset: True
load_dataset: False


transform:
    augs: [] # choices=["shift", "hflip", "vflip", "scale", "rotate"]

n_balls: 10
n_offsets: ${mult_int:${datamodule.n_balls},5}  # ${add_int:${datamodule.n_balls},5} # change to 5
z_dim: ${datamodule.dataset.z_dim} # the dimension of the target latent, if it is the hue in HSV color, then it is 1, if it is x,y position, then it is 2
sparsity_degree: ${datamodule.n_balls} # can be in [1,n_balls] range, where n_balls means all objects undergo a change
known_mechanism: True

# Concerning the data_loaders
batch_size: 256
num_workers: 6
shuffle: False
drop_last: False

# Samples
num_samples:
    train: 10000
    valid: 1000
    test: 1000


# color selection of the balls
color_selection: cyclic_fixed # options: cyclic_fixed, same, random

      
transforms:
    t1:
      _target_: torchvision.transforms.ToTensor
    t2:
      _target_: slot_based_disentanglement.datamodule.transformations.Standardize
    t3:
      _target_: slot_based_disentanglement.datamodule.transformations.TensorClip
#     t4:
#       _target_: torchvision.transforms.Normalize
#       mean: [0.98, 0.98, 0.98]
#       std: [0.09, 0.09, 0.09]

